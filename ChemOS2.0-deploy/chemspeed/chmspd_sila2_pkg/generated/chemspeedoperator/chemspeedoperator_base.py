# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from .chemspeedoperator_types import (
    Addbatch_IntermediateResponses,
    Addbatch_Responses,
    AddCharacterization_IntermediateResponses,
    AddCharacterization_Responses,
    ChangeProcedure_Responses,
)

if TYPE_CHECKING:
    from ...server import Server


class ChemSpeedOperatorBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """

        Runs the ChemSpeed platform using a given synthesis procedure

        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def get_IsBusy(self, *, metadata: MetadataDict) -> str:
        """
        Indicates if chemspeed is currently occupied

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Indicates if chemspeed is currently occupied
        """
        pass

    @abstractmethod
    def ChangeProcedure(self, SynthesisProcedure: str, *, metadata: MetadataDict) -> ChangeProcedure_Responses:
        """
        Changes the synthesis procedure


        :param SynthesisProcedure: Synthesis procedure to use in this experiment.

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def Addbatch(
        self,
        BatchName: str,
        Batchfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Addbatch_IntermediateResponses],
    ) -> Addbatch_Responses:
        """
         Adds a batch for the chemspeed platform to make


        :param BatchName: Name of batchfile to use

        :param Batchfile: Batch file to use in this experiment.

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def AddCharacterization(
        self,
        RackPosition: str,
        Identifier: str,
        Structure: str,
        FilterCollect: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[AddCharacterization_IntermediateResponses],
    ) -> AddCharacterization_Responses:
        """
         Adds a Characterization for chemspeed to schedule injection


        :param RackPosition: Position of compound on rackL

        :param Identifier:  Name of sample

        :param Structure: Smiles string for target compound

        :param FilterCollect: whether or not flitration of sample is required prior to injection

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass
