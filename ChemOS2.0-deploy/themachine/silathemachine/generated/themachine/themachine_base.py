# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from .themachine_types import Runjob_IntermediateResponses, Runjob_Responses

if TYPE_CHECKING:
    from ...server import Server


class TheMachineBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """

        TheMachine RemoteControl via Sila

        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def Runjob(
        self,
        Jobfile: str,
        ProcedureScript: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Runjob_IntermediateResponses],
    ) -> Runjob_Responses:
        """
         Runs a job on the machine platform


        :param Jobfile: Batch file to use in this experiment.

        :param ProcedureScript: python script of the procedure to use

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass
