# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.themachine import Runjob_IntermediateResponses, Runjob_Responses, TheMachineBase

if TYPE_CHECKING:
    from ..server import Server


import subprocess
import sys
import errno
import socket

SOCKET_IP = "127.0.0.1"
SOCKET_PORT = 65001
SOCKET_ID = 'sila2'
HEADER_LENGTH=10


class TheMachineImpl(TheMachineBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def Runjob(
        self,
        Jobfile: str,
        ProcedureScript: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Runjob_IntermediateResponses],
    ) -> Runjob_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        with open("silajob.csv", "w", encoding='utf-8-sig') as f:
            f.write(Jobfile)
        
        server_cmd = f"python {ProcedureScript} silajob.csv"
        proc = subprocess.Popen(server_cmd,shell=True,stdout=subprocess.PIPE)


        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect((SOCKET_IP, SOCKET_PORT))
        client_socket.setblocking(False)
        username = SOCKET_ID.encode('utf-8')
        username_header = f"{len(username):<{HEADER_LENGTH}}".encode('utf-8')
        client_socket.send(username_header + username)

        while True:
        #while proc.poll() is None:
            try:
                #while True:
                while proc.poll() is None:
                    username_header = client_socket.recv(HEADER_LENGTH)
                    if not len(username_header):
                        print('Connection closed by the server')
                        sys.exit()

                    username_length = int(username_header.decode('utf-8').strip())
                    username = client_socket.recv(username_length).decode('utf-8')

                    message_header = client_socket.recv(HEADER_LENGTH)
                    message_length = int(message_header.decode('utf-8').strip())
                    message = client_socket.recv(message_length).decode('utf-8')

                    #instance.send_intermediate_response(Runjob_IntermediateResponses(message, "operations"))
                    instance.send_intermediate_response(Runjob_IntermediateResponses(message))
                return (Runjob_Responses("job complete"))
            except IOError as e:
                if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:
                    print('Reading error: {}'.format(str(e)))
                    sys.exit()
                continue
            except Exception as e:
                print('Reading error: '.format(str(e)))
                sys.exit()
    
        #return(Runjob_Responses("job complete"))
