
# Generated by sila2.code_generator; sila2.__version__: 0.10.1
# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations
import time

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses
import json
from ..generated.opticstable import (
    OpticsTableSimulatorBase,
    Status_Responses,
    SubmitJob_IntermediateResponses,
    SubmitJob_Responses,
)

from pathlib import Path
import subprocess
import os
import errno
import sys

import json
import socket
if TYPE_CHECKING:
    from ..server import Server


HEADER_LENGTH = 10

def run_optics_table_client(client_socket, instance, jobname):

    endfilename = f"completed_folder/{jobname}.json"
    outputdir = f"output_folder/{jobname}"
    bindata = str.encode("test")

    while True:
        try:
            while True:
                # Receive our "header" containing username length, it's size is defined and constant
                username_header = client_socket.recv(HEADER_LENGTH)

                # If we received no data, server gracefully closed a connection
                if not len(username_header):
                    print('Connection closed by the server')
                    sys.exit()

                # Convert header to int value
                username_length = int(username_header.decode('utf-8').strip())

                # Receive and decode username
                username = client_socket.recv(username_length).decode('utf-8')

                # Now do the same for message (as we received username, we received whole message, there's no need to check if it has any length)
                message_header = client_socket.recv(HEADER_LENGTH)
                message_length = int(message_header.decode('utf-8').strip())
                message = client_socket.recv(message_length).decode('utf-8')

                # Print message
                print(f'{username} > {message}')
                instance.send_intermediate_response(SubmitJob_IntermediateResponses(message, bindata))

                ## check for detection of output file
                if os.path.isfile(endfilename) or message == f"job {jobname} completed":
                    #compress data 
                    cmd = f"7z a {outputdir}/{jobname}.7z {outputdir}"
                    compressjob = subprocess.run(cmd,shell=True,stdout=subprocess.PIPE)

                    if compressjob.returncode == 0:
                        with open(f"{outputdir}/{jobname}.7z", "rb") as f:
                            data =f.read()

                        instance.send_intermediate_response(SubmitJob_IntermediateResponses('output_data', data))

                        time.sleep(30)
                    else:
                        instance.send_intermediate_response(SubmitJob_IntermediateResponses('send return data failed', bindata))
                    return "characterization complete"

        except IOError as e:
            if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:
                print('Reading error: {}'.format(str(e)))
                sys.exit()

            # We just did not receive anything
            continue

        except Exception as e:
            # Any other exception - exit
            print('Reading error: '.format(str(e)))
            sys.exit()

