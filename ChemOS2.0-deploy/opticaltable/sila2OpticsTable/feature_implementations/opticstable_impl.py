# Generated by sila2.code_generator; sila2.__version__: 0.10.3
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.opticstable import (
    OpticsTableBase,
    Status_Responses,
    SubmitJob_IntermediateResponses,
    SubmitJob_Responses,
)

import json, socket, time, os
from .utils import run_optics_table_client

if TYPE_CHECKING:
    from ..server import Server

HEADER_LENGTH = 10
SOCKET_IP = "127.0.0.1"
SOCKET_PORT = 65012
my_username = "sila2_optics"

class OpticsTableImpl(OpticsTableBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def Status(self, *, metadata: MetadataDict) -> Status_Responses:
        return "ON"

    def SubmitJob(
        self,
        JobFile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[SubmitJob_IntermediateResponses],
    ) -> SubmitJob_Responses:
        instance.begin_execution()# set execution status from `waiting` to `running`

        evaldict = eval(JobFile) 
        jobname = evaldict["name"]

        if os.path.exists(os.path.join("completed_folder", jobname+".json")):
            SubmitJob_Responses("job name already exists, please resubmit")        

        # Create socket
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect((SOCKET_IP, SOCKET_PORT))
        client_socket.setblocking(False)
        username = my_username.encode('utf-8')
        username_header = f"{len(username):<{HEADER_LENGTH}}".encode('utf-8')
        client_socket.send(username_header + username)

        time.sleep(4)

        with open(f"input_folder/{jobname}.json", 'w') as f:
            json.dump(evaldict, f)
        bindata = str.encode("test")
        instance.send_intermediate_response(SubmitJob_IntermediateResponses(f"submitted job {jobname}", bindata))


        return SubmitJob_Responses(run_optics_table_client(client_socket,instance, jobname))
