# Generated by sila2.code_generator; sila2.__version__: 0.10.3
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from .hplcmssimulator_types import (
    GetResults1st_IntermediateResponses,
    GetResults1st_Responses,
    Status_Responses,
    SubmitJob_IntermediateResponses,
    SubmitJob_Responses,
    ValveStatus_Responses,
)

if TYPE_CHECKING:
    from ...server import Server


class HPLCMSsimulatorBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """

        Runs the ChemSpeed platform using a given synthesis procedure

        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def Status(self, *, metadata: MetadataDict) -> Status_Responses:
        """
        Gets the Status of the HPLC


        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def ValveStatus(self, Purpose: str, StatusUpdate: str, *, metadata: MetadataDict) -> ValveStatus_Responses:
        """
        Gets the Status of the HPLC


        :param Purpose: Purpose of query: ask or edit

        :param StatusUpdate: status to change to, if applicable

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def SubmitJob(
        self,
        JobFile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[SubmitJob_IntermediateResponses],
    ) -> SubmitJob_Responses:
        """
         Submits a Job for the HPLCMS to do


        :param JobFile: Job file to use in this experiment.

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def GetResults1st(
        self,
        JobFile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[GetResults1st_IntermediateResponses],
    ) -> GetResults1st_Responses:
        """
        Gets data from characterization_1st job


        :param JobFile: Job file to retrieve.

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass
