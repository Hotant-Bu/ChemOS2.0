# Generated by sila2.code_generator; sila2.__version__: 0.10.3
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.hplcms import (
    HPLCMSBase,
    Status_Responses,
    SubmitJobAutosampler_IntermediateResponses,
    SubmitJobAutosampler_Responses,
    SubmitJobChemspeed_IntermediateResponses,
    SubmitJobChemspeed_Responses,
    ValveStatus_Responses,
)

if TYPE_CHECKING:
    from ..server import Server
from .utils import get_status, update_valve_status, check_valve_status, run_autosampler_client, run_chemspeed_client
import pickle, os
from datetime import date
from pathlib import Path
import socket
import time
import json

filepath = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
datapath = os.path.join(filepath, "data_path")


INPUT = os.path.abspath("data_path/jobs_submitted/")
OUTPUT = os.path.abspath("data_path/jobs_submitted/")
STATUS = os.path.abspath("data_path/status/HPLCMS_status.pkl")  
IP = "127.0.0.1"
PORT = 65051
USERNAME = "sila_server"
HEADER_LENGTH = 10

today = date.today()
today_formatted = today.strftime("%Y%m%d")



class HPLCMSImpl(HPLCMSBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def Status(self, *, metadata: MetadataDict) -> Status_Responses:
        return get_status(STATUS)

    def ValveStatus(self, Purpose: str, StatusUpdate: str, *, metadata: MetadataDict) -> ValveStatus_Responses:
        if Purpose == "update":
            response = update_valve_status(StatusUpdate)
        elif Purpose == "check":
            response = check_valve_status()
        return ValveStatus_Responses(response)

    def SubmitJobAutosampler(
        self,
        JobFile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[SubmitJobAutosampler_IntermediateResponses],
    ) -> SubmitJobAutosampler_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`

        bindata = str.encode("test")
        
        instance.send_intermediate_response(SubmitJobAutosampler_IntermediateResponses(Data=f"beginning job ", Payload=bindata))

        injection = eval(JobFile)
        jobname = injection["name"]
        
        if "position" not in injection:
            print("Error: unspecified autosample position in job input file")

        timestamp = time.strftime("%y-%m-%d-%H-%M", time.localtime())
        injection["name"] = jobname + timestamp 


        jobfile = os.path.join(INPUT, (injection["name"]+".json"))

        instance.send_intermediate_response(SubmitJobAutosampler_IntermediateResponses(Data=f"{INPUT}", Payload=bindata))
        instance.send_intermediate_response(SubmitJobAutosampler_IntermediateResponses(Data=f"{jobfile}", Payload=bindata))
        outputfile = f"{OUTPUT}/{injection['name']}.json"

        #connect to socket
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect((IP, PORT))
        client_socket.setblocking(False)
        username = USERNAME.encode('utf-8')
        username_header = f"{len(username):<{HEADER_LENGTH}}".encode('utf-8')
        client_socket.send(username_header + username)
        

        #submit job to HPLCMS
        with open(jobfile, 'w') as f:
            json.dump(injection, f)

        instance.send_intermediate_response(SubmitJobAutosampler_IntermediateResponses(Data=f"beginning job {injection['name']}", Payload=bindata))

        return SubmitJobAutosampler_Responses(run_autosampler_client(client_socket, instance, outputfile, injection["name"]))



    def SubmitJobChemspeed(
        self,
        JobFile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[SubmitJobChemspeed_IntermediateResponses],
    ) -> SubmitJobChemspeed_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`

        injection = eval(JobFile)
        jobname = injection["name"]


        timestamp = time.strftime("%y-%m-%d-%H-%M", time.localtime())
        injection["name"] = jobname + timestamp 


        jobfile = os.path.join(INPUT, (jobname+".json"))
        outputfile = f"{OUTPUT}/{injection['name']}.json"

        #connect to socket
        IP = "127.0.0.1"
        PORT = 65005
        USERNAME = "sila_server"
        HEADER_LENGTH = 10
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect((IP, PORT))
        client_socket.setblocking(False)
        username = USERNAME.encode('utf-8')
        username_header = f"{len(username):<{HEADER_LENGTH}}".encode('utf-8')
        client_socket.send(username_header + username)
        bindata = str.encode("test")

        #submit job to HPLCMS
        with open(jobfile, 'w') as f:
            json.dump(injection, f)

        instance.send_intermediate_response(SubmitJobChemspeed_IntermediateResponses(Data=f"beginning job {injection['name']}", Payload=bindata))

        return SubmitJobChemspeed_Responses(run_chemspeed_client(client_socket, instance, outputfile, injection["name"]))
