# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstance

from .sensor_types import Humidity_Responses, HumidityTemperature_Responses, Temperature_Responses

if TYPE_CHECKING:
    from ...server import Server


class SensorBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """

        A Sila_server for a temperatur/humidity sensor

        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def Temperature(self, *, metadata: MetadataDict, instance: ObservableCommandInstance) -> Temperature_Responses:
        """
        get a temperature measurment


        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def Humidity(self, *, metadata: MetadataDict, instance: ObservableCommandInstance) -> Humidity_Responses:
        """
        get a humidity measurment


        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def HumidityTemperature(
        self, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> HumidityTemperature_Responses:
        """
        get a humidity and temperature measurement


        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass
