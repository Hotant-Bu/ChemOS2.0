# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstance

from ..generated.sensor import Humidity_Responses, HumidityTemperature_Responses, SensorBase, Temperature_Responses

if TYPE_CHECKING:
    from ..server import Server


# Sensor type
# sensor = Adafruit_DHT.DHT22

# GPIO pins for each sensor
pin_sensor1 = 4
pin_sensor2 = 17

class SensorImpl(SensorBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def Temperature(self, *, metadata: MetadataDict, instance: ObservableCommandInstance) -> Temperature_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`

        humidity1, temperature1 = Adafruit_DHT.read_retry(sensor, pin_sensor1)
        humidity2, temperature2 = Adafruit_DHT.read_retry(sensor, pin_sensor2)
        return Temperature_Responses(str(temperature1)+","+str(temperature2))

    def Humidity(self, *, metadata: MetadataDict, instance: ObservableCommandInstance) -> Humidity_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        humidity1, temperature1 = Adafruit_DHT.read_retry(sensor, pin_sensor1)
        humidity2, temperature2 = Adafruit_DHT.read_retry(sensor, pin_sensor2)
        return Humidity_Responses(str(humidity1)+","+str(humidity2))

    def HumidityTemperature(
        self, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> HumidityTemperature_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        humidity1, temperature1 = Adafruit_DHT.read_retry(sensor, pin_sensor1)
        humidity2, temperature2 = Adafruit_DHT.read_retry(sensor, pin_sensor2)
        return Temperature_Responses(f"temps: {str(temperature1)},{str(temperature2)}, humidities: {humidity1}, {humidity2}")
