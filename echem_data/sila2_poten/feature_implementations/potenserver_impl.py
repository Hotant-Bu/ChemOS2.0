# Generated by sila2.code_generator; sila2.__version__: 0.10.4
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.potenserver import PotenServerBase, RunExp_IntermediateResponses, RunExp_Responses

from auto_complex_echem import potentiostat, run_experiment

if TYPE_CHECKING:
    from ..server import Server


class PotenServerImpl(PotenServerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def RunExp(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[RunExp_IntermediateResponses],
    ) -> RunExp_Responses:
        cfg = run_experiment.load_cfg(Jobfile)
        run_exp(cfg.experimental)



        instance.begin_execution()  # set execution status from `waiting` to `running`
        raise NotImplementedError  # TODO
