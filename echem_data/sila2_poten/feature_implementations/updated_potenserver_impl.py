# Generated by sila2.code_generator; sila2.__version__: 0.10.4
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.potenserver import (
    PotenServerBase,
    PrepareSample_IntermediateResponses,
    PrepareSample_Responses,
    Rinse_IntermediateResponses,
    Rinse_Responses,
    RunExp_IntermediateResponses,
    RunExp_Responses,
    RunVoltammetry_IntermediateResponses,
    RunVoltammetry_Responses,
)

if TYPE_CHECKING:
    from ..server import Server
import json
from auto_complex_echem import AutoComplex
from .utils import *
from potentiostat import run_test
import time
class PotenServerImpl(PotenServerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def RunExp(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[RunExp_IntermediateResponses],
    ) -> RunExp_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        
        jobdict =json.loads(Jobfile)
        cfg = load_cfg(jobdict)

         

        autocomplex = AutoComplex()


         
        instance.send_intermediate_response(RunExp_IntermediateResponses("priming done. beginning complexation.", "data"))
        autocomplex.run_complexation(

                num_metal=cfg.experiment.metal.position,
                num_ligand=cfg.experiment.ligand.position,
                quantity_metal=cfg.experiment.metal.volume,
                quantity_ligand=cfg.experiment.ligand.volume,
                quantity_buffer=1-(cfg.experiment.ligand.volume/2),
                quantity_electrolyte=1-(cfg.experiment.ligand.volume/2),
                mix_iteration=cfg.experiment.num_mixings
                )

        autocomplex.rxn_to_echem()

        #autocomplex.ref_to_echem()
        
        csv = run_test(
                v_range=(cfg.potentiostat.v_min, cfg.potentiostat.v_max),
                cycles=cfg.potentiostat.cycles,
                steps=cfg.potentiostat.steps
                )
        
        print(csv)

        autocomplex.clean_echem()
        autocomplex.clean_rxn()
        #autocomplex.mix_rxn(6)
        with open(csv, "r") as f:
            data = f.read()

        instance.send_intermediate_response(RunExp_IntermediateResponses("output_data", data))

        time.sleep(10)
    
        oxi_peaks, red_peaks = process_cycles(csv)

        def checknum(x):
            x.dropna()
            if x.empty: return -1
            y = x["I"].argmax()
            return x["V"].iloc[y]
        
        try:
            oxivalues = list(map(checknum,oxi_peaks))[1:]


            max_val= np.max(oxivalues)

        except:
            max_val = -5

        return RunExp_Responses(str(max_val))

    def Rinse(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Rinse_IntermediateResponses],
    ) -> Rinse_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`


        raise NotImplementedError  # TODO

    def PrepareSample(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[PrepareSample_IntermediateResponses],
    ) -> PrepareSample_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`

        autocomplex = AutoComplex()

        autocomplex.clean_rxn()
        autocomplex.clean_echem()

        

        #with open("/home/poten/echem/Auto_Complex_EChem/src/auto_complex_echem/2ce1721c-1766-11ee-8b1d-d83add0cd5a8.csv", "r") as f:
        #    data = f.read()

        #instance.send_intermediate_response(PrepareSample_IntermediateResponses("output_data", data))

        #time.sleep(10)

        return PrepareSample_Responses("caca")  # TODO

    def RunVoltammetry(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[RunVoltammetry_IntermediateResponses],
    ) -> RunVoltammetry_Responses:
        instance.begin_execution()

        jobdict = json.loads(Jobfile)


        cfg = load_cfg_pot(jobdict)


