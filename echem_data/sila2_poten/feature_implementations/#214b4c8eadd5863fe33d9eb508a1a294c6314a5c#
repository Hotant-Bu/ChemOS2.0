# Generated by sila2.code_generator; sila2.__version__: 0.10.4
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.potenserver import (
    PotenServerBase,
    PrepareSample_IntermediateResponses,
    PrepareSample_Responses,
    Rinse_IntermediateResponses,
    Rinse_Responses,
    RunExp_IntermediateResponses,
    RunExp_Responses,
    RunVoltammetry_IntermediateResponses,
    RunVoltammetry_Responses,
)

if TYPE_CHECKING:
    from ..server import Server
import json
from auto_complex_echem import AutoComplex
from .utils import *
from potentiostat import run_test

class PotenServerImpl(PotenServerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def RunExp(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[RunExp_IntermediateResponses],
    ) -> RunExp_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`

        autocomplex = AutoComplex()


        jobdict = json.loads(Jobfile)
        cfg = load_cfg(jobdict)
        
        autocomplex.run_complexation(

                num_metal=cfg["experiment"]["metal"]["position"],
                num_ligand=cfg["experiment"]["ligand"]["position"],
                quantity_metal=cfg["experiment"]["metal"]["volume"],
                quantity_ligand=cfg["experiment"]["ligand"]["volume"],
                quantity_buffer=1-(cfg["experiment"]["ligand"]["volume"]/2),
                quantity_electrolyte=1-(cfg["experiment"]["ligand"]["volume"]/2),
                mix_iteration=cfg["experiment"]["num_mixings"]
                )

        autocomplex.rxn_to_echem()

        csv = run_test(
                v_range=(cfg["potentiostat"]["v_min"], cfg["potentiostat"]["v_max"]),
                cycles=cfg["potentiostat"]["cycles"],
                steps=cfg["potentiostat"]["steps"]
                )

        with open(csv, "r") as f:
            data = f.read()

        instance.send_intermediate_response(RunExp_IntermediateResponses("output_data", data))
    
        oxi_peaks, red_peaks = process_cycles(csv)

        def checknum(x):
            y = x.max()
            if (pd.isna(y)): return -1
                return y

        oxivalues = list(map(checknum,oxi_peaks))

        max_val= np.max(oxivalues)

        #except:
        #    max_val = -1

        return RunExp_Responses()

    def Rinse(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Rinse_IntermediateResponses],
    ) -> Rinse_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`


        raise NotImplementedError  # TODO

    def PrepareSample(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[PrepareSample_IntermediateResponses],
    ) -> PrepareSample_Responsesgit@gitlab.com:aspuru-guzik-group/self-driving-lab/devices/hotplates.git:
        instance.begin_execution()  # set execution status from `waiting` to `running`

        jobdict = json.loads(Jobfile)
        cfg = load_cfg_exp()

        raise NotImplementedError  # TODO

    def RunVoltammetry(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[RunVoltammetry_IntermediateResponses],
    ) -> RunVoltammetry_Responses:
        instance.begin_execution()

        jobdict = json.loads(Jobfile)


        cfg = load_cfg_pot(jobdict)


